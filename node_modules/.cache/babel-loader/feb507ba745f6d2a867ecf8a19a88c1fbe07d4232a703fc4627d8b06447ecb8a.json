{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikes\\\\cardverse\\\\src\\\\pages\\\\DeckBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DeckBuilder() {\n  _s();\n  const [deckText, setDeckText] = useState(\"\");\n  const [deckList, setDeckList] = useState([]);\n  function parseDeck(text) {\n    const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n    const counts = {};\n    const names = [];\n    lines.forEach(line => {\n      const match = line.match(/^(\\d+)x?\\s+(.*)$/i);\n      const count = match ? parseInt(match[1]) : 1;\n      const name = match ? match[2].trim() : line;\n      if ([\"SIDEBOARD:\", \"STICKERS:\"].includes(name.toUpperCase())) return;\n      if (!counts[name]) {\n        counts[name] = count;\n        names.push(name);\n      } else {\n        counts[name] += count;\n      }\n    });\n    return names.map(name => ({\n      name,\n      count: counts[name]\n    }));\n  }\n  function handlePasteChange(e) {\n    setDeckText(e.target.value);\n  }\n  function handleParseClick() {\n    const parsed = parseDeck(deckText);\n    setDeckList(parsed);\n  }\n  function handleFileUpload(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = ev => {\n      setDeckText(ev.target.result);\n      const parsed = parseDeck(ev.target.result);\n      setDeckList(parsed);\n    };\n    reader.readAsText(file);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl mx-auto p-6 bg-white rounded shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Deck Importer (Step 1)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: deckText,\n      onChange: handlePasteChange,\n      placeholder: \"Paste your deck list here...\",\n      rows: 8,\n      className: \"w-full p-2 border rounded mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".txt\",\n      onChange: handleFileUpload,\n      className: \"mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleParseClick,\n      className: \"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition\",\n      children: \"Parse Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"mt-6 font-semibold text-lg\",\n      children: \"Parsed Deck List:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), deckList.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"No cards parsed yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-disc list-inside mt-2 max-h-64 overflow-auto\",\n      children: deckList.map(({\n        name,\n        count\n      }, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [count, \"x \", name]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(DeckBuilder, \"w2qctuQ1XxXzn/26emdy7BC9Irw=\");\n_c = DeckBuilder;\nvar _c;\n$RefreshReg$(_c, \"DeckBuilder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DeckBuilder","_s","deckText","setDeckText","deckList","setDeckList","parseDeck","text","lines","split","map","l","trim","filter","Boolean","counts","names","forEach","line","match","count","parseInt","name","includes","toUpperCase","push","handlePasteChange","e","target","value","handleParseClick","parsed","handleFileUpload","file","files","reader","FileReader","onload","ev","result","readAsText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","rows","type","accept","onClick","length","i","_c","$RefreshReg$"],"sources":["C:/Users/mikes/cardverse/src/pages/DeckBuilder.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function DeckBuilder() {\r\n  const [deckText, setDeckText] = useState(\"\");\r\n  const [deckList, setDeckList] = useState([]);\r\n\r\n  function parseDeck(text) {\r\n    const lines = text\r\n      .split(/\\r?\\n/)\r\n      .map((l) => l.trim())\r\n      .filter(Boolean);\r\n\r\n    const counts = {};\r\n    const names = [];\r\n\r\n    lines.forEach((line) => {\r\n      const match = line.match(/^(\\d+)x?\\s+(.*)$/i);\r\n      const count = match ? parseInt(match[1]) : 1;\r\n      const name = match ? match[2].trim() : line;\r\n\r\n      if ([\"SIDEBOARD:\", \"STICKERS:\"].includes(name.toUpperCase())) return;\r\n\r\n      if (!counts[name]) {\r\n        counts[name] = count;\r\n        names.push(name);\r\n      } else {\r\n        counts[name] += count;\r\n      }\r\n    });\r\n\r\n    return names.map((name) => ({ name, count: counts[name] }));\r\n  }\r\n\r\n  function handlePasteChange(e) {\r\n    setDeckText(e.target.value);\r\n  }\r\n\r\n  function handleParseClick() {\r\n    const parsed = parseDeck(deckText);\r\n    setDeckList(parsed);\r\n  }\r\n\r\n  function handleFileUpload(e) {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (ev) => {\r\n      setDeckText(ev.target.result);\r\n      const parsed = parseDeck(ev.target.result);\r\n      setDeckList(parsed);\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-xl mx-auto p-6 bg-white rounded shadow-md\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Deck Importer (Step 1)</h2>\r\n\r\n      <textarea\r\n        value={deckText}\r\n        onChange={handlePasteChange}\r\n        placeholder=\"Paste your deck list here...\"\r\n        rows={8}\r\n        className=\"w-full p-2 border rounded mb-4\"\r\n      />\r\n\r\n      <input\r\n        type=\"file\"\r\n        accept=\".txt\"\r\n        onChange={handleFileUpload}\r\n        className=\"mb-4\"\r\n      />\r\n\r\n      <button\r\n        onClick={handleParseClick}\r\n        className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition\"\r\n      >\r\n        Parse Deck\r\n      </button>\r\n\r\n      <h3 className=\"mt-6 font-semibold text-lg\">Parsed Deck List:</h3>\r\n      {deckList.length === 0 ? (\r\n        <p className=\"text-gray-500\">No cards parsed yet.</p>\r\n      ) : (\r\n        <ul className=\"list-disc list-inside mt-2 max-h-64 overflow-auto\">\r\n          {deckList.map(({ name, count }, i) => (\r\n            <li key={i}>\r\n              {count}x {name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}